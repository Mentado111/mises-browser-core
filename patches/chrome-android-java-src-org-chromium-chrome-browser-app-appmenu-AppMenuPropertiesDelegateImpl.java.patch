diff --git a/chrome/android/java/src/org/chromium/chrome/browser/app/appmenu/AppMenuPropertiesDelegateImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/app/appmenu/AppMenuPropertiesDelegateImpl.java
index afa0faf6bc8c02f9773ce75bfcb631ab0f2d9b89..211c151a584bd20eee663143e5a10d4a75afb704 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/appmenu/AppMenuPropertiesDelegateImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/appmenu/AppMenuPropertiesDelegateImpl.java
@@ -97,6 +97,32 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
+import java.util.Hashtable;
+
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.BitmapFactory;
+import android.util.Base64;
+import android.util.Base64InputStream;
+import androidx.appcompat.view.menu.MenuBuilder;
+import org.chromium.chrome.browser.profiles.Profile;
+import org.chromium.content_public.browser.WebContents;
+
+import org.chromium.components.browser_ui.site_settings.SiteSettingsCategory;
+import org.chromium.components.browser_ui.site_settings.WebsitePreferenceBridge;
+import org.chromium.components.browser_ui.site_settings.WebsitePreferenceBridgeJni;
+import org.chromium.components.content_settings.ContentSettingsType;
+import org.chromium.components.content_settings.ContentSettingValues;
+
+import org.chromium.chrome.browser.AppMenuBridge;
+import org.chromium.base.Log;
+
+import android.graphics.Color;
+import android.text.SpannableString;
+import android.text.style.RelativeSizeSpan;
+import android.text.style.ForegroundColorSpan;
+import org.chromium.components.browser_ui.site_settings.ContentSettingsResources;
+
 /**
  * Base implementation of {@link AppMenuPropertiesDelegate} that handles hiding and showing menu
  * items based on activity state.
@@ -122,6 +148,7 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
     private int mAddAppTitleShown;
     private Map<CustomViewBinder, Integer> mCustomViewTypeOffsetMap;
 
+    private boolean mShowExtensionOnly;
     /**
      * This is non null for the case of ChromeTabbedActivity when the corresponding {@link
      * CallbackController} has been fired.
@@ -338,12 +365,60 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
 
         prepareMenu(menu, handler);
 
+        Tab currentTab = mActivityTabProvider.get();
+        WebContents webContents = null;
+        webContents = currentTab != null ? currentTab.getWebContents() : null;
+
+        Menu extensionMenu = new PopupMenu(mContext, mDecorView).getMenu();
+        // If we are not showing extensions first, we append the extensions to the existing menu
+        boolean show_extensions_first = ContextUtils.getAppSharedPreferences().getBoolean("show_extensions_first", true);
+        if (mShowExtensionOnly) {
+	  show_extensions_first = false;
+          for (int i = 0; i < menu.size(); ++i) {
+            MenuItem item = menu.getItem(i); 
+            if (item.getItemId() != R.id.extensions_id) {
+              item.setVisible(false);
+            }
+          }
+	}
+	if (!show_extensions_first)
+           extensionMenu = menu;
+	prepareExtensionMenu(
+                    extensionMenu, isInStartSurfaceHomepage() ? null : currentTab, handler, mTabModelSelector.getCurrentModel().isIncognito());
+        boolean menuHasFiveIconsRow = false;
+        for (int i = 0; i < menu.size(); ++i) {
+            MenuItem item = menu.getItem(i);
+            if (!item.isVisible()) continue;
+
+            if (item.getItemId() == R.id.icon_row_menu_id
+                && item.getSubMenu().size() == 5)
+                menuHasFiveIconsRow = true;
+        }
+
+        boolean extensionsHaveBeenAdded = false;
+
         // TODO(crbug.com/1119550): Programmatically create menu item's PropertyModel instead of
         // converting from MenuItems.
         for (int i = 0; i < menu.size(); ++i) {
             MenuItem item = menu.getItem(i);
             if (!item.isVisible()) continue;
 
+            // If we do not have a five icons row in the main menu, we immediately show the extensions
+            if (show_extensions_first
+                && !menuHasFiveIconsRow
+                && !extensionsHaveBeenAdded) {
+                    extensionsHaveBeenAdded = true;
+                    for (int j = 0; j < extensionMenu.size(); ++j) {
+                        MenuItem extensionItem = extensionMenu.getItem(j);
+                        if (!extensionItem.isVisible()) continue;
+                        PropertyModel extensionPropertyModel = AppMenuUtil.menuItemToPropertyModel(extensionItem);
+                        extensionPropertyModel.set(AppMenuItemProperties.ICON_COLOR_RES, getMenuItemIconColorRes(extensionItem));
+                        extensionPropertyModel.set(AppMenuItemProperties.SUPPORT_ENTER_ANIMATION, true);
+
+                        modelList.add(new MVCListAdapter.ListItem(AppMenuItemType.STANDARD, extensionPropertyModel));
+                    }
+            }
+
             PropertyModel propertyModel = AppMenuUtil.menuItemToPropertyModel(item);
             propertyModel.set(AppMenuItemProperties.ICON_COLOR_RES, getMenuItemIconColorRes(item));
             propertyModel.set(AppMenuItemProperties.SUPPORT_ENTER_ANIMATION, true);
@@ -362,7 +437,6 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
                     subList.add(new MVCListAdapter.ListItem(0, subModel));
                     if (subitem.getItemId() == R.id.reload_menu_id) {
                         mReloadPropertyModel = subModel;
-                        Tab currentTab = mActivityTabProvider.get();
                         loadingStateChanged(currentTab == null ? false : currentTab.isLoading());
                     }
                 }
@@ -371,7 +445,8 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
             int menutype = AppMenuItemType.STANDARD;
             if (item.getItemId() == R.id.request_desktop_site_row_menu_id
                     || item.getItemId() == R.id.share_row_menu_id
-                    || item.getItemId() == R.id.auto_dark_web_contents_row_menu_id) {
+                    || item.getItemId() == R.id.auto_dark_web_contents_row_menu_id
+                    || item.getItemId() == R.id.adblock_row_menu_id) {
                 menutype = AppMenuItemType.TITLE_BUTTON;
             } else if (item.getItemId() == R.id.icon_row_menu_id) {
                 int viewCount = item.getSubMenu().size();
@@ -390,6 +465,25 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
                 }
             }
             modelList.add(new MVCListAdapter.ListItem(menutype, propertyModel));
+
+            // If we chose to show extensions first, we append them after the first row that has 5 action buttons
+            if (show_extensions_first
+                && !extensionsHaveBeenAdded
+                && menuHasFiveIconsRow
+                // current row is five icons row
+                && item.getItemId() == R.id.icon_row_menu_id
+                && item.getSubMenu().size() == 5) {
+                    extensionsHaveBeenAdded = true;
+                    for (int j = 0; j < extensionMenu.size(); ++j) {
+                        MenuItem extensionItem = extensionMenu.getItem(j);
+                        if (!extensionItem.isVisible()) continue;
+                        PropertyModel extensionPropertyModel = AppMenuUtil.menuItemToPropertyModel(extensionItem);
+                        extensionPropertyModel.set(AppMenuItemProperties.ICON_COLOR_RES, getMenuItemIconColorRes(extensionItem));
+                        extensionPropertyModel.set(AppMenuItemProperties.SUPPORT_ENTER_ANIMATION, true);
+
+                        modelList.add(new MVCListAdapter.ListItem(AppMenuItemType.STANDARD, extensionPropertyModel));
+                    }
+            }
         }
 
         return modelList;
@@ -410,6 +504,61 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
         prepareCommonMenuItems(menu, menuGroup, isIncognito);
     }
 
+    private void prepareExtensionMenu(
+            Menu menu, @Nullable Tab currentTab, AppMenuHandler handler, boolean isIncognito) {
+
+        WebContents webContents = null;
+        webContents = currentTab != null ? currentTab.getWebContents() : null;
+
+        boolean canShowExtensions = false;
+        if (currentTab != null)
+          canShowExtensions = true;
+        int numItems = menu.size();
+
+        if (mShowExtensionOnly && canShowExtensions) {
+          int itemIndex = numItems++;
+          String extensions = "";
+          if (isIncognito)
+            extensions = AppMenuBridge.getForProfile(Profile.fromWebContents(webContents).getPrimaryOTRProfile(true)).getRunningExtensions(webContents);
+          else
+            extensions = AppMenuBridge.getForProfile(Profile.fromWebContents(webContents).getOriginalProfile()).getRunningExtensions(webContents);
+          if (!extensions.isEmpty()) {
+            String[] extensionsArray = extensions.split("\u001f");
+            for (String extension: extensionsArray) {
+              String[] extensionsInfo = extension.split("\u001e");
+              MenuItem newlyAdded = menu.add(999999, 999999 + itemIndex, Menu.NONE, extensionsInfo[0]);
+              if (extensionsInfo.length > 1) {
+                newlyAdded.setTitleCondensed("Extension: " + extensionsInfo[1]);
+              }
+
+              if (extensionsInfo.length > 2 && !extensionsInfo[2].equals("")) {
+                newlyAdded.setTitleCondensed("Extension: " + extensionsInfo[1] + ": " + extensionsInfo[2]);
+              }
+
+              if (extensionsInfo.length > 3) {
+                String cleanImage = extensionsInfo[3].replace("data:image/png;base64,", "").replace("data:image/jpeg;base64,","").replace("data:image/gif;base64,", "");
+                byte[] decodedString = Base64.decode(cleanImage, Base64.DEFAULT);
+                Bitmap decodedByte = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);
+
+                newlyAdded.setIcon(new BitmapDrawable(mContext.getResources(), decodedByte));
+
+                boolean isIncognitoEnabled = false;
+                if (extensionsInfo.length > 4 && extensionsInfo[4].equals("active"))
+                  isIncognitoEnabled = true;
+                if (!isIncognitoEnabled && isIncognito) {
+                  SpannableString spanString = new SpannableString(newlyAdded.getTitle().toString());
+                  spanString.setSpan(new ForegroundColorSpan(Color.GRAY), 0, spanString.length(), 0);
+                  newlyAdded.setTitle(spanString);
+                  newlyAdded.setTitleCondensed("Extension (inactive): " + extensionsInfo[1] + ": " + extensionsInfo[2]);
+                  newlyAdded.setIcon(ContentSettingsResources.getBlockedSquareIcon(mContext.getResources(), newlyAdded.getIcon()));
+                }
+              }
+              itemIndex++;
+           }
+         }
+       }
+    }
+
     /**
      * Prepare the menu items. Note: it is possible that currentTab is null.
      */
@@ -428,6 +577,7 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
 
         // Update the icon row items (shown in narrow form factors).
         boolean shouldShowIconRow = shouldShowIconRow();
+        if (menu.findItem(R.id.icon_row_menu_id) != null)
         menu.findItem(R.id.icon_row_menu_id).setVisible(shouldShowIconRow);
         if (shouldShowIconRow) {
             SubMenu actionBar = menu.findItem(R.id.icon_row_menu_id).getSubMenu();
@@ -457,18 +607,23 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
         }
 
         mUpdateMenuItemVisible = shouldShowUpdateMenuItem();
+        if (menu.findItem(R.id.update_menu_id) != null)
         menu.findItem(R.id.update_menu_id).setVisible(mUpdateMenuItemVisible);
         if (mUpdateMenuItemVisible) {
             mAppMenuInvalidator = () -> handler.invalidateAppMenu();
             UpdateMenuItemHelper.getInstance().registerObserver(mAppMenuInvalidator);
         }
 
+        if (menu.findItem(R.id.new_window_menu_id) != null)
         menu.findItem(R.id.new_window_menu_id).setVisible(shouldShowNewWindow());
+        if (menu.findItem(R.id.move_to_other_window_menu_id) != null)
         menu.findItem(R.id.move_to_other_window_menu_id).setVisible(shouldShowMoveToOtherWindow());
         MenuItem menu_all_windows = menu.findItem(R.id.manage_all_windows_menu_id);
         boolean showManageAllWindows = shouldShowManageAllWindows();
+        if (menu_all_windows != null)
         menu_all_windows.setVisible(showManageAllWindows);
         if (showManageAllWindows) {
+            if (menu_all_windows != null)
             menu_all_windows.setTitle(
                     mContext.getString(R.string.menu_manage_all_windows, getInstanceCount()));
         }
@@ -480,6 +635,7 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
 
         // Don't allow either "chrome://" pages or interstitial pages to be shared, or when the
         // current tab is null.
+        if (menu.findItem(R.id.share_row_menu_id) != null)
         menu.findItem(R.id.share_row_menu_id)
                 .setVisible(isCurrentTabNotNull && mShareUtils.shouldEnableShare(currentTab));
 
@@ -487,6 +643,7 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
             updateDirectShareMenuItem(menu.findItem(R.id.direct_share_menu_id));
         }
 
+        if (menu.findItem(R.id.paint_preview_show_id) != null)
         menu.findItem(R.id.paint_preview_show_id)
                 .setVisible(isCurrentTabNotNull
                         && shouldShowPaintPreview(isChromeScheme, currentTab, isIncognito));
@@ -496,6 +653,7 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
         if (isCurrentTabNotNull && shouldShowWebContentsDependentMenuItem(currentTab)
                 && ImageDescriptionsController.getInstance()
                            .shouldShowImageDescriptionsMenuItem()) {
+            if (menu.findItem(R.id.get_image_descriptions_id) != null)
             menu.findItem(R.id.get_image_descriptions_id).setVisible(true);
 
             int titleId = R.string.menu_stop_image_descriptions;
@@ -511,18 +669,22 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
                 titleId = R.string.menu_get_image_descriptions;
             }
 
+            if (menu.findItem(R.id.get_image_descriptions_id) != null)
             menu.findItem(R.id.get_image_descriptions_id).setTitle(titleId);
         } else {
+            if (menu.findItem(R.id.get_image_descriptions_id) != null)
             menu.findItem(R.id.get_image_descriptions_id).setVisible(false);
         }
 
         // Conditionally add the Zoom menu item, but not on the native NTP or on Start surface.
+        if (menu.findItem(R.id.page_zoom_id) != null)
         menu.findItem(R.id.page_zoom_id)
                 .setVisible(isCurrentTabNotNull
                         && shouldShowWebContentsDependentMenuItem(currentTab)
                         && PageZoomCoordinator.shouldShowMenuItem());
 
         // Disable find in page on the native NTP or on Start surface.
+        if (menu.findItem(R.id.find_in_page_id) != null)
         menu.findItem(R.id.find_in_page_id)
                 .setVisible(
                         isCurrentTabNotNull && shouldShowWebContentsDependentMenuItem(currentTab));
@@ -538,7 +700,33 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
 
         updateAutoDarkMenuItem(menu, currentTab, isChromeScheme);
 
+        updateAdblockMenuItem(menu, currentTab, true /* can show */);
+        MenuItem nightModeMenu = menu.findItem(R.id.night_mode_switcher_id);
+        if (nightModeMenu != null) {
+               if (ContextUtils.getAppSharedPreferences().getBoolean("darken_websites_enabled", false)) {
+                   nightModeMenu.setTitle(R.string.main_menu_turn_off_night_mode);
+                   nightModeMenu.setIcon(R.drawable.ic_night_mode_off);
+               } else {
+                   nightModeMenu.setTitle(R.string.main_menu_turn_on_night_mode);
+                   nightModeMenu.setIcon(R.drawable.ic_night_mode_on);
+               }
+        }
+
+        MenuItem disableProxyMenu = menu.findItem(R.id.disable_proxy_id);
+        boolean isProxyEnabled = AppMenuBridge.getForProfile(Profile.getLastUsedRegularProfile()).isProxyEnabled();
+        if (isProxyEnabled) {
+            if (disableProxyMenu != null)
+                disableProxyMenu.setVisible(true);
+        } else {
+            if (disableProxyMenu != null)
+                disableProxyMenu.setVisible(false);
+        }
+        //MenuItem devToolMenu = menu.findItem(R.id.developer_tools_id);
+	//if (devToolMenu != null) 
+	    //devToolMenu.setVisible(false);
+
         // Only display reader mode settings menu option if the current page is in reader mode.
+        if (menu.findItem(R.id.reader_mode_prefs_id) != null)
         menu.findItem(R.id.reader_mode_prefs_id)
                 .setVisible(isCurrentTabNotNull && shouldShowReaderModePrefs(currentTab));
 
@@ -674,6 +862,45 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
         }
     }
 
+    protected void updateAdblockMenuItem(
+            Menu menu, Tab currentTab, boolean canShowAdblockMenu) {
+        MenuItem adblockMenuRow = menu.findItem(R.id.adblock_row_menu_id);
+        MenuItem adblockMenuLabel = menu.findItem(R.id.adblock_id);
+        MenuItem adblockMenuCheck = menu.findItem(R.id.adblock_check_id);
+
+        if (currentTab == null || currentTab.getUrl() == null) { if (adblockMenuRow != null) adblockMenuRow.setVisible(false); return ; }
+        String url = currentTab.getUrl().getSpec();
+        boolean isChromeScheme = url.startsWith(UrlConstants.CHROME_URL_PREFIX)
+                || url.startsWith(UrlConstants.CHROME_NATIVE_URL_PREFIX);
+        // Also hide adblock desktop site on Reader Mode.
+        boolean isDistilledPage = DomDistillerUrlUtils.isDistilledPage(url);
+
+        // adsEnabled means "adBlockingEnabled"
+        boolean itemVisible = canShowAdblockMenu
+                && !isChromeScheme && !currentTab.isNativePage() && !isDistilledPage;
+        if (adblockMenuRow != null)
+            adblockMenuRow.setVisible(itemVisible);
+        if (!itemVisible) return;
+
+        boolean adBlockIsActive = (WebsitePreferenceBridgeJni.get().isContentSettingEnabled(Profile.getLastUsedRegularProfile(), ContentSettingsType.ADS) == false);
+        if (!adBlockIsActive) {
+            adblockMenuCheck.setChecked(false);
+            adblockMenuLabel.setIcon(R.drawable.ic_adblock_off);
+        } else {
+	    final String origin = currentTab.getUrl().getOrigin().getSpec();
+            int adblockSettingForThisSite = WebsitePreferenceBridgeJni.get().getPermissionSettingForOrigin(Profile.getLastUsedRegularProfile(), ContentSettingsType.ADS, origin, origin);
+            if (adblockSettingForThisSite == ContentSettingValues.DEFAULT || adblockSettingForThisSite == ContentSettingValues.BLOCK){
+                adblockMenuCheck.setChecked(true);
+                adblockMenuLabel.setIcon(R.drawable.ic_adblock_on);
+            }
+            else {
+                adblockMenuCheck.setChecked(false);
+                adblockMenuLabel.setIcon(R.drawable.ic_adblock_off);
+            }
+	    Log.i("Mises", "Adblock updateAdblockMenuItem " + String.valueOf(adblockSettingForThisSite));
+       }
+    }
+
     /**
      * @param currentTab The currentTab for which the app menu is showing.
      * @return Whether the reader mode preferences menu item should be displayed.
@@ -941,7 +1168,62 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
      */
     protected void prepareTranslateMenuItem(Menu menu, @Nullable Tab currentTab) {
         boolean isTranslateVisible = currentTab != null && shouldShowTranslateMenuItem(currentTab);
+        if (menu.findItem(R.id.translate_id) != null)
         menu.findItem(R.id.translate_id).setVisible(isTranslateVisible);
+        if (currentTab == null || currentTab.getUrl() == null) return ;
+        String url = currentTab.getUrl().getSpec();
+            MenuItem translate_menu = menu.findItem(R.id.translate_id);
+            if (translate_menu != null) {
+                   try {
+                       if (url != null
+                        &&
+                          (
+                            url.contains("www.microsofttranslator.com/bv.aspx")
+                        ||  url.contains("translatetheweb.com")
+                        ||  url.contains("translatetheweb.net")
+                        ||  url.contains("translatetheweb-int.net")
+                        ||  url.contains("translatoruser.com")
+                        ||  url.contains("translatoruser.net")
+                          )
+                        ) {
+                           translate_menu.setTitle(R.string.main_menu_translate_undo);
+                       } else {
+                           translate_menu.setTitle(R.string.menu_translate);
+                       }
+                       if (url != null
+                        &&
+                          (
+                            url.startsWith("https://translate.google.com/")
+                        ||  url.startsWith("https://translate.googleusercontent.com/")
+                        ||  url.startsWith("http://translate.google.com/")
+                        ||  url.startsWith("http://translate.googleusercontent.com/")
+                        ||  url.contains(".translate.goog/")
+                          )
+                        ) {
+                           translate_menu.setTitle(R.string.main_menu_translate_undo);
+                       }
+                       if (url != null
+                        &&
+                          (
+                            url.startsWith("https://fanyi.baidu.com/")
+                        ||  url.startsWith("http://fanyi.baidu.com/")
+                          )
+                        ) {
+                           translate_menu.setTitle(R.string.main_menu_translate_undo);
+                       }
+                       if (url != null
+                        &&
+                          (
+                            url.startsWith("https://translate.yandex.com/")
+                        ||  url.startsWith("http://translate.yandex.com/")
+                          )
+                        ) {
+                           translate_menu.setTitle(R.string.main_menu_translate_undo);
+                       }
+                   } catch (Exception e) {
+                       translate_menu.setTitle(R.string.menu_translate);
+                   }
+            }
     }
 
     @Override
@@ -962,6 +1244,7 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
 
     @Override
     public void onMenuDismissed() {
+	mShowExtensionOnly = false;
         mReloadPropertyModel = null;
         if (mUpdateMenuItemVisible) {
             UpdateMenuItemHelper.getInstance().onMenuDismissed();
@@ -1052,6 +1335,7 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
      */
     protected void updateBookmarkMenuItemShortcut(
             MenuItem bookmarkMenuItemShortcut, @Nullable Tab currentTab, boolean fromCCT) {
+        if (bookmarkMenuItemShortcut == null) return ;
         if (!mBookmarkModelSupplier.hasValue() || currentTab == null) {
             // If the BookmarkModel still isn't available, assume the bookmark menu item is not
             // editable.
@@ -1081,6 +1365,7 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
      */
     protected void updateBookmarkMenuItemRow(
             MenuItem bookmarkMenuItemAdd, MenuItem bookmarkMenuItemEdit, @Nullable Tab currentTab) {
+        if (bookmarkMenuItemAdd == null || bookmarkMenuItemEdit == null) return ;
         // If the bookmark menu item row is disabled, then hide both item.
         if (!BookmarkFeatures.isBookmarkMenuItemAsDedicatedRowEnabled()
                 || !mBookmarkModelSupplier.hasValue() || currentTab == null) {
@@ -1200,7 +1485,9 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
         // Hide app menu item if on non-NTP chrome:// page or auto dark not enabled.
         boolean isAutoDarkEnabled = isAutoDarkWebContentsEnabled();
         boolean itemVisible = currentTab != null && !isChromeScheme && isAutoDarkEnabled;
-        autoDarkMenuRow.setVisible(itemVisible);
+        itemVisible = false;
+        if (autoDarkMenuRow != null)
+            autoDarkMenuRow.setVisible(itemVisible);
         if (!itemVisible) return;
 
         // Set text based on if site is blocked or not.
@@ -1267,4 +1554,9 @@ public class AppMenuPropertiesDelegateImpl implements AppMenuPropertiesDelegate
                     mContext.getString(R.string.accessibility_menu_share_via, directShareTitle));
         }
     }
+ 
+    @Override
+    public void showExtensionOnly(boolean show) {
+        mShowExtensionOnly = show;  
+    }
 }
