diff --git a/chrome/browser/download/android/java/src/org/chromium/chrome/browser/download/DownloadDialogBridge.java b/chrome/browser/download/android/java/src/org/chromium/chrome/browser/download/DownloadDialogBridge.java
index de2e05ed19b087400d4b10c1f4c07d8c39f6c8aa..a4064b645fb48e62a0b3c17f860a6a378c7ac04b 100644
--- a/chrome/browser/download/android/java/src/org/chromium/chrome/browser/download/DownloadDialogBridge.java
+++ b/chrome/browser/download/android/java/src/org/chromium/chrome/browser/download/DownloadDialogBridge.java
@@ -26,6 +26,28 @@ import org.chromium.ui.base.WindowAndroid;
 import org.chromium.ui.modaldialog.ModalDialogManager;
 import org.chromium.ui.modaldialog.ModalDialogManagerHolder;
 
+import org.chromium.base.Log;
+import android.view.View;
+import org.chromium.base.ContextUtils;
+import android.graphics.Color;
+import android.graphics.drawable.ColorDrawable;
+import android.widget.ListView;
+import android.content.Context;
+import android.widget.ListView;
+import android.content.pm.PackageManager;
+import android.content.Intent;
+import android.content.Context;
+import android.content.pm.ResolveInfo;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+import android.net.Uri;
+import android.text.TextUtils;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.ActivityNotFoundException;
+import android.net.Uri;
+import java.io.File;
+
 /**
  * Glues download dialogs UI code and handles the communication to download native backend.
  * When {@link ChromeFeatureList#DOWNLOAD_LATER} is enabled, the following dialogs will be shown in
@@ -76,16 +98,62 @@ public class DownloadDialogBridge implements DownloadLocationDialogController {
         mLocationDialog.destroy();
     }
 
+    private boolean downloadWithAdm(WindowAndroid windowAndroid, long totalBytes,
+           String suggestedPath, String urlToDownload) {
+        Activity activity = (Activity) windowAndroid.getActivity().get();
+        // If the activity has gone away, just clean up the native pointer.
+        if (activity == null) {
+            return false;
+        }
+
+        boolean useAdmIfPossible = ContextUtils.getAppSharedPreferences().getBoolean("enable_external_download_manager", false);
+        String activeDownloadManagerActivityName = ContextUtils.getAppSharedPreferences().getString("selected_external_download_manager_activity_name", "");
+        String activeDownloadManagerPackageName = ContextUtils.getAppSharedPreferences().getString("selected_external_download_manager_package_name", "");
+
+        if (useAdmIfPossible && !TextUtils.isEmpty(activeDownloadManagerPackageName) && !TextUtils.isEmpty(activeDownloadManagerActivityName) && activeDownloadManagerPackageName.equals("site.mises.browser") != true
+         && !TextUtils.isEmpty(urlToDownload) && (urlToDownload.toLowerCase(Locale.ROOT).startsWith("http:") || urlToDownload.toLowerCase(Locale.ROOT).startsWith("https:") || urlToDownload.toLowerCase(Locale.ROOT).startsWith("magnet:") || urlToDownload.toLowerCase(Locale.ROOT).startsWith("ftp:"))) {
+            if (urlToDownload.toLowerCase(Locale.ROOT).contains(".googleusercontent.com/crx"))
+                return false;
+            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(urlToDownload));
+//            intent.addCategory("android.intent.category.BROWSABLE");
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            intent.setClassName(activeDownloadManagerPackageName, activeDownloadManagerActivityName);
+
+            intent.putExtra("android.intent.extra.TEXT", urlToDownload);
+
+            // ADM
+            intent.putExtra("com.android.extra.filename", new File(suggestedPath).getName());
+
+            // MXPlayer
+            intent.putExtra("title", new File(suggestedPath).getName());
+            intent.putExtra("filename", new File(suggestedPath).getName());
+
+            try {
+                Log.i("Mises", "[Download] Starting activity intent [" + activeDownloadManagerPackageName + "/" + activeDownloadManagerActivityName + "]");
+                activity.startActivity(intent);
+                return true;
+            } catch (ActivityNotFoundException exception) {
+                Log.i("Mises", "[Download] Starting activity intent: ActivityNotFoundException");
+            }
+        }
+        return false;
+    }
+
     @CalledByNative
     private void showDialog(WindowAndroid windowAndroid, long totalBytes,
             @ConnectionType int connectionType, @DownloadLocationDialogType int dialogType,
-            String suggestedPath, boolean supportsLaterDialog, boolean isIncognito) {
+            String suggestedPath, boolean supportsLaterDialog, boolean isIncognito, String urlToDownload) {
         mWindowAndroid = windowAndroid;
         Activity activity = windowAndroid.getActivity().get();
         if (activity == null) {
             onCancel();
             return;
         }
+        if (downloadWithAdm(windowAndroid, totalBytes, suggestedPath, urlToDownload)) {
+            onCancel();
+            return;
+        }
+
 
         DownloadDirectoryProvider.getInstance().getAllDirectoriesOptions((dirs) -> {
             mShowEditLocation = (dirs != null && dirs.size() > 1);
