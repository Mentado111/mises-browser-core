diff --git a/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/suggestions/OmniboxSuggestionsDropdown.java b/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/suggestions/OmniboxSuggestionsDropdown.java
index 9a45760efeab8cd2fcee11bbd02908cc415b1dd1..ed1f87f4e758b32e2313a0a2fd05569307f96c43 100644
--- a/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/suggestions/OmniboxSuggestionsDropdown.java
+++ b/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/suggestions/OmniboxSuggestionsDropdown.java
@@ -42,6 +42,7 @@ import org.chromium.ui.base.ViewUtils;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import org.chromium.base.ContextUtils;
 
 /** A widget for showing a list of omnibox suggestions. */
 public class OmniboxSuggestionsDropdown extends RecyclerView {
@@ -433,11 +434,37 @@ public class OmniboxSuggestionsDropdown extends RecyclerView {
         try (TraceEvent tracing = TraceEvent.scoped("OmniboxSuggestionsList.Measure");
                 TimingMetric metric = SuggestionsMetrics.recordSuggestionListMeasureTime()) {
             int anchorBottomRelativeToContent = calculateAnchorBottomRelativeToContent();
+            if (ContextUtils.getAppSharedPreferences().getBoolean("enable_bottom_toolbar", false))
+              anchorBottomRelativeToContent = 0;
             maybeUpdateLayoutParams(anchorBottomRelativeToContent);
 
             int availableViewportHeight =
                     calculateAvailableViewportHeight(anchorBottomRelativeToContent);
+            int viewportDivider = 1;
+            if (ContextUtils.getAppSharedPreferences().getBoolean("enable_bottom_toolbar", false))
+              viewportDivider = 2;
+            int displayableSuggestions = 0;
+            int suggestionHeightPx = getResources().getDimensionPixelSize(R.dimen.omnibox_suggestion_semicompact_height);
+            for (int spaceTakenBySuggestions = 0; (spaceTakenBySuggestions + suggestionHeightPx) < (availableViewportHeight / viewportDivider); spaceTakenBySuggestions += suggestionHeightPx, displayableSuggestions++);
+            if (mAdapter != null && displayableSuggestions > mAdapter.getItemCount())
+              displayableSuggestions = mAdapter.getItemCount();
+            if (displayableSuggestions == 0)
+              displayableSuggestions = 1;
+            // When bottom toolbar is enabled, having two suggestions displays as 1
+            if (displayableSuggestions == 1 && ContextUtils.getAppSharedPreferences().getBoolean("enable_bottom_toolbar", false))
+              displayableSuggestions = 2;
+            availableViewportHeight = displayableSuggestions * suggestionHeightPx;
+            availableViewportHeight += getResources().getDimensionPixelSize(R.dimen.omnibox_suggestion_list_padding_bottom) / 2;
+
             int desiredWidth = mAnchorView.getMeasuredWidth();
+
+            notifyObserversIfViewportHeightChanged(availableViewportHeight);
+            mWidthMeasureSpec = MeasureSpec.makeMeasureSpec(desiredWidth, MeasureSpec.EXACTLY);
+            mHeightMeasureSpec = MeasureSpec.makeMeasureSpec(availableViewportHeight,
+                    mEmbedder.isTablet() ? MeasureSpec.AT_MOST : MeasureSpec.EXACTLY);
+            super.onMeasure(mWidthMeasureSpec, mHeightMeasureSpec);
+            requestLayout();
+
             // Suppress the initial requests to shrink the viewport of the omnibox suggestion
             // dropdown. The viewport will decrease when the keyboard is triggered, but the request
             // to resize happens when the keyboard starts showing before it has had the chance to
