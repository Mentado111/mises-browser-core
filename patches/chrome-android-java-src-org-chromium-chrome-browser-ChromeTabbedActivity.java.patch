diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
index e000e324eadb5bd010cac23f372c30e2c7da2d3f..2d2843017dc14627a77e15bbfa1b6822165aa60a 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
@@ -36,6 +36,7 @@ import androidx.lifecycle.Lifecycle;
 import androidx.lifecycle.LifecycleObserver;
 import androidx.lifecycle.LifecycleRegistry;
 
+import org.chromium.base.ContextUtils;
 import org.chromium.base.CallbackController;
 import org.chromium.base.CommandLine;
 import org.chromium.base.IntentUtils;
@@ -226,7 +227,20 @@ import java.lang.annotation.RetentionPolicy;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
+import android.net.Uri;
+import org.chromium.components.url_formatter.UrlFormatter;
+import org.chromium.chrome.browser.init.ChromeBrowserReferrer;
+import org.chromium.chrome.browser.init.InAppUpdater;
 
+import org.chromium.chrome.browser.homepage.HomepageManager;
+
+import android.animation.ValueAnimator;
+import org.chromium.chrome.browser.mises.MisesController;
+import org.chromium.chrome.browser.mises.MisesShareWin;
+import org.chromium.chrome.browser.mises.MisesUtil;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.chromium.chrome.browser.feed.FeedFeatures;
 /**
  * This is the main activity for ChromeMobile when not running in document mode.  All the tabs
  * are accessible via a chrome specific tab switching UI.
@@ -248,7 +262,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
     // Maximum delay for initial tab creation. This is for homepage and NTP, not previous tabs
     // restore. This is needed because we do not know when reading PartnerBrowserCustomizations
     // provider will be finished.
-    private static final int INITIAL_TAB_CREATION_TIMEOUT_MS = 500;
+    private static final int INITIAL_TAB_CREATION_TIMEOUT_MS = 1;
 
     /**
      * Sending an intent with this action to Chrome will cause it to close all tabs
@@ -352,6 +366,8 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
 
     // Time at which an intent was received and handled.
     private long mIntentHandlingTimeMs;
+    
+    private InAppUpdater mInAppUpdater = new InAppUpdater();
 
     /**
      * Whether the StartSurface is shown when Chrome is launched.
@@ -708,7 +724,6 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             if (TabUiFeatureUtilities.isGridTabSwitcherEnabled(this)) {
                 createTabSwitcherOrStartSurface(compositorViewHolder, compositorViewHolder);
             }
-
             // clang-format off
             mLayoutManager = new LayoutManagerChromePhone(compositorViewHolder, mContentContainer,
                     mStartSurfaceSupplier, mTabSwitcherSupplier, getTabContentManagerSupplier(),
@@ -838,7 +853,11 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                 getTabModelSelector().getModel(false).commitAllTabClosures();
                 // This assumes that the keyboard can not be seen at the same time as the
                 // newtab button on the toolbar.
-                getCurrentTabCreator().launchNTP();
+                if (getTabModelSelector().isIncognitoSelected()) {
+                  getCurrentTabCreator().launchIncognitoNTP();
+                } else {
+                  getCurrentTabCreator().launchUrl(HomepageManager.getInstance().getHomepageUriIgnoringEnabledState(), TabLaunchType.FROM_CHROME_UI);
+                }
                 mLocaleManager.showSearchEnginePromoIfNeeded(ChromeTabbedActivity.this, null);
                 if (getTabModelSelector().isIncognitoSelected()) {
                     RecordUserAction.record("MobileToolbarStackViewNewIncognitoTab");
@@ -915,6 +934,12 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                         this, getWindow(), mLayoutManager, mTabModelSelector);
             }
 
+            try {
+                ValueAnimator.class.getMethod("setDurationScale", float.class).invoke(null, 0.60f);
+            } catch (Throwable t) {
+
+            }
+
             mUIWithNativeInitialized = true;
             onAccessibilityTabSwitcherModeChanged();
 
@@ -954,6 +979,18 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
 
     @Override
     public void onNewIntent(Intent intent) {
+        if (intent != null) {
+            if (intent.getAction() != null && intent.getAction().equals(Intent.ACTION_MAIN)) {
+                String url = intent.getStringExtra("mises_url");
+                if (url != null && !url.isEmpty()) {
+                    url = UrlFormatter.fixupUrl(url).getSpec();
+                    Intent newintent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+                    newintent.setPackage(getPackageName());
+                    startActivity(newintent);
+                }
+		
+            }
+        }
         // The intent to use in maybeDispatchExplicitMainViewIntent(). We're explicitly
         // adding NEW_TASK flag to make sure backing from CCT brings up the caller activity,
         // and not Chrome
@@ -1000,6 +1037,9 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             } else {
                 initializeCompositorContent();
             }
+            
+	    ChromeBrowserReferrer.handleInstallReferrer(this);
+	    mInAppUpdater.startCheck(this);
 
             // All this initialization can be expensive so it's split into multiple tasks.
             PostTask.postTask(UiThreadTaskTraits.DEFAULT,
@@ -1080,13 +1120,20 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
         SearchEngineChoiceNotification.handleSearchEngineChoice(
                 this, getSnackbarManager(), SETTINGS_LAUNCHER);
 
-        if (!isWarmOnResume()) {
+        if (!isWarmOnResume() && FeedFeatures.isFeedEnabled()) {
             SuggestionsMetrics.recordArticlesListVisible();
         }
 
         FeatureNotificationUtils.handleIntentIfApplicable(getIntent());
+        mInAppUpdater.onResume(this);
     }
 
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode,resultCode,data);
+        mInAppUpdater.onActivityResult(requestCode,resultCode,data);	
+    }  
+
     @Override
     public void onPauseWithNative() {
         mTabModelSelector.commitAllTabClosures();
@@ -1321,7 +1368,8 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                     CipherFactory.getInstance().restoreFromBundle(getSavedInstanceState());
 
             boolean noRestoreState =
-                    CommandLine.getInstance().hasSwitch(ChromeSwitches.NO_RESTORE_STATE);
+                    CommandLine.getInstance().hasSwitch(ChromeSwitches.NO_RESTORE_STATE) ||
+                    ContextUtils.getAppSharedPreferences().getBoolean("close_tabs_on_exit", false);
             if (noRestoreState) {
                 // Clear the state files because they are inconsistent and useless from now on.
                 mTabModelOrchestrator.clearState();
@@ -1468,7 +1516,11 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                             this, getCurrentTabModel().isIncognito(), isTablet())) {
                 mLayoutManager.showLayout(LayoutType.BROWSING, true);
                 if (getTabModelSelector().getCurrentModel().getCount() == 0) {
-                    getCurrentTabCreator().launchNTP();
+                    if (getTabModelSelector().isIncognitoSelected()) {
+                        getCurrentTabCreator().launchIncognitoNTP();
+                    } else {
+                        getCurrentTabCreator().launchUrl(HomepageManager.getInstance().getHomepageUriIgnoringEnabledState(), TabLaunchType.FROM_CHROME_UI);
+                    }
                 }
             }
         }
@@ -1625,15 +1677,15 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                     if (url == null || url.equals(UrlConstants.NTP_URL)) {
                         if (fromLauncherShortcut) {
                             getTabCreator(true).launchUrl(
-                                    UrlConstants.NTP_URL, TabLaunchType.FROM_LAUNCHER_SHORTCUT);
+                                    "chrome-search://local-ntp/incognito-ntp.html", TabLaunchType.FROM_LAUNCHER_SHORTCUT);
                             recordLauncherShortcutAction(true);
                             reportNewTabShortcutUsed(true);
                         } else if (fromAppWidget) {
                             RecordUserAction.record("QuickActionSearchWidget.StartIncognito");
                             getTabCreator(true).launchUrl(
-                                    UrlConstants.NTP_URL, TabLaunchType.FROM_APP_WIDGET);
+                                    "chrome-search://local-ntp/incognito-ntp.html", TabLaunchType.FROM_APP_WIDGET);
                         } else if (IncognitoTabLauncher.didCreateIntent(intent)) {
-                            Tab tab = getTabCreator(true).launchUrl(UrlConstants.NTP_URL,
+                            Tab tab = getTabCreator(true).launchUrl("chrome-search://local-ntp/incognito-ntp.html",
                                     TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB);
                             if (IncognitoTabLauncher.shouldFocusOmnibox(intent)) {
                                 // Since the Tab is created in the foreground, its View will gain
@@ -1649,7 +1701,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                         } else {
                             // Used by the Account management screen to open a new incognito tab.
                             // Account management screen collects its metrics separately.
-                            getTabCreator(true).launchUrl(UrlConstants.NTP_URL,
+                            getTabCreator(true).launchUrl("chrome-search://local-ntp/incognito-ntp.html",
                                     TabLaunchType.FROM_CHROME_UI, intent, mIntentHandlingTimeMs);
                         }
                     } else {
@@ -1789,8 +1841,10 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
         mContentContainer = (ViewGroup) findViewById(android.R.id.content);
         mControlContainer = (ToolbarControlContainer) findViewById(R.id.control_container);
 
+        boolean isLegacyTabSwitcher = false;
+
         Supplier<Boolean> dialogVisibilitySupplier = null;
-        if (TabUiFeatureUtilities.isTabGroupsAndroidEnabled(this)) {
+        if (TabUiFeatureUtilities.isTabGroupsAndroidEnabled(this) && !isLegacyTabSwitcher) {
             dialogVisibilitySupplier = () -> {
                 boolean isTabSwitcherOnlyRefactorEnabled =
                         ReturnToChromeUtil.isTabSwitcherOnlyRefactorEnabled(this);
@@ -2127,7 +2181,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             reportNewTabShortcutUsed(false);
             if (fromMenu) RecordUserAction.record("MobileMenuNewTab.AppMenu");
 
-            getTabCreator(false).launchNTP();
+            getTabCreator(false).launchUrl(HomepageManager.getInstance().getHomepageUriIgnoringEnabledState(), TabLaunchType.FROM_CHROME_UI);
 
             mLocaleManager.showSearchEnginePromoIfNeeded(this, null);
         } else if (id == R.id.new_incognito_tab_menu_id) {
@@ -2230,7 +2284,49 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             RecordUserAction.record("MobileTabClosedUndoShortCut");
         } else if (id == R.id.enter_vr_id) {
             VrModuleProvider.getDelegate().enterVrIfNecessary();
-        } else {
+        } else if (id == R.id.mises_forward_menu_id) {
+            String SCRIPT = "if(window.misesModule && window.misesModule.getWindowInformation){window.misesModule.getWindowInformation()} else {console.log('window.misesModule or window.misesModule.getWindowInformation is null')}";
+            final Context context = ChromeTabbedActivity.this;
+            if (currentTab == null || currentTab.getWebContents() == null)
+                return true;
+            if (currentTab.isNativePage() || currentTab.isClosing()
+                    || currentTab.isShowingErrorPage() ) {
+                Log.e("mises","share currentTab.isNativePage() || currentTab.isClosing() || currentTab.isShowingErrorPage() || currentTab.isShowingSadTab()");
+                Toast.makeText(context, context.getString(R.string.lbl_can_not_share_tip), Toast.LENGTH_SHORT).show();
+                return true;
+            }
+            currentTab.getWebContents().evaluateJavaScript(SCRIPT, jsonResult -> {
+                Log.e("mises share msg : ", jsonResult);
+                if (jsonResult != null && !jsonResult.isEmpty()) {
+                    try {
+                        JSONObject ob = new JSONObject(jsonResult);
+                        String icon = "";
+                        if (ob.has("icon"))
+                            icon = ob.getString("icon");
+                        String title = ob.getString("title");
+                        String url = ob.getString("url");
+                        if (MisesController.getInstance().getMisesToken().isEmpty()) {
+                            MisesUtil.showAlertDialog(context, context.getString(R.string.lbl_login_tip), v1 -> {
+                                ChromeTabCreator tabCreator = ChromeTabbedActivity.this.getTabCreator(false);
+                                if (tabCreator != null) {
+                                    tabCreator.openSinglePage("https://home.mises.site/home/me");
+                                }
+                            });
+                            return;
+                        }
+                        MisesShareWin shareWin = MisesShareWin.newInstance(ChromeTabbedActivity.this, icon, title, url);
+                        shareWin.show((ChromeTabbedActivity.this).getSupportFragmentManager(), "MisesShareWin");
+                    } catch (JSONException e) {
+                        Log.e("mises", "share is not json" + e.toString());
+                        Toast.makeText(context, context.getString(R.string.lbl_can_not_share_tip), Toast.LENGTH_SHORT).show();
+                        e.printStackTrace();
+                    }
+                } else {
+                    Log.e("mises", "share json is null");
+                    Toast.makeText(context, context.getString(R.string.lbl_can_not_share_tip), Toast.LENGTH_SHORT).show();
+                }
+            });
+	} else {
             return super.onMenuOrKeyboardAction(id, fromMenu);
         }
         return true;
@@ -2976,4 +3072,5 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             }
         });
     }
+	
 }
