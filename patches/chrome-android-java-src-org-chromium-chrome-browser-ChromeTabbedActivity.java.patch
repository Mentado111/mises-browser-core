diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
index 098dcda489758c6deddf36cc03d686840b2d4c01..ab03a7a0d81f7a87bb84d62900e6af74d5430461 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ChromeTabbedActivity.java
@@ -225,6 +225,20 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Set;
 
+import org.chromium.base.ContextUtils;
+import android.net.Uri;
+import org.chromium.components.url_formatter.UrlFormatter;
+import org.chromium.chrome.browser.init.ChromeBrowserReferrer;
+import org.chromium.chrome.browser.init.InAppUpdater;
+import org.chromium.chrome.browser.homepage.HomepageManager;
+import android.animation.ValueAnimator;
+import org.chromium.chrome.browser.mises.MisesController;
+import org.chromium.chrome.browser.mises.MisesShareWin;
+import org.chromium.chrome.browser.mises.MisesUtil;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.chromium.chrome.browser.feed.FeedFeatures;
+
 /**
  * This is the main activity for ChromeMobile when not running in document mode.  All the tabs
  * are accessible via a chrome specific tab switching UI.
@@ -246,7 +260,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
     // Maximum delay for initial tab creation. This is for homepage and NTP, not previous tabs
     // restore. This is needed because we do not know when reading PartnerBrowserCustomizations
     // provider will be finished.
-    private static final int INITIAL_TAB_CREATION_TIMEOUT_MS = 500;
+    private static final int INITIAL_TAB_CREATION_TIMEOUT_MS = 1;
 
     /**
      * Sending an intent with this action to Chrome will cause it to close all tabs
@@ -342,6 +356,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
 
     // Time at which an intent was received and handled.
     private long mIntentHandlingTimeMs;
+    private InAppUpdater mInAppUpdater = new InAppUpdater();
 
     /**
      * Whether the StartSurface is shown when Chrome is launched.
@@ -834,7 +849,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                         (getLayoutManager().getActiveLayoutType() == LayoutType.TAB_SWITCHER)
                         ? TabLaunchType.FROM_TAB_SWITCHER_UI
                         : TabLaunchType.FROM_CHROME_UI;
-                getCurrentTabCreator().launchNTP(tabLaunchType);
+                launchNTP();
                 mLocaleManager.showSearchEnginePromoIfNeeded(ChromeTabbedActivity.this, null);
                 if (getTabModelSelector().isIncognitoSelected()) {
                     RecordUserAction.record("MobileToolbarStackViewNewIncognitoTab");
@@ -905,6 +920,12 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                         getWindow(), mLayoutManager, mTabModelSelector, getLifecycleDispatcher());
             }
 
+            try {
+                ValueAnimator.class.getMethod("setDurationScale", float.class).invoke(null, 0.60f);
+            } catch (Throwable t) {
+
+            }
+
             mUIWithNativeInitialized = true;
             onAccessibilityTabSwitcherModeChanged();
 
@@ -945,6 +966,19 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
     @Override
     public void onNewIntent(Intent intent) {
         try (TraceEvent e = TraceEvent.scoped("ChromeTabbedActivity.onNewIntent")) {
+
+            if (intent != null) {
+                if (intent.getAction() != null && intent.getAction().equals(Intent.ACTION_MAIN)) {
+                    String url = intent.getStringExtra("mises_url");
+                    if (url != null && !url.isEmpty()) {
+                        url = UrlFormatter.fixupUrl(url).getSpec();
+                        Intent newintent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+                        newintent.setPackage(getPackageName());
+                        startActivity(newintent);
+                    }
+                }
+            }
+
             // The intent to use in maybeDispatchExplicitMainViewIntent(). We're explicitly
             // adding NEW_TASK flag to make sure backing from CCT brings up the caller activity,
             // and not Chrome
@@ -1000,6 +1034,8 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             } else {
                 initializeCompositorContent();
             }
+            ChromeBrowserReferrer.handleInstallReferrer(this);
+	        mInAppUpdater.startCheck(this);
 
             // All this initialization can be expensive so it's split into multiple tasks.
             PostTask.postTask(UiThreadTaskTraits.DEFAULT,
@@ -1074,13 +1110,14 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
         SearchEngineChoiceNotification.handleSearchEngineChoice(
                 this, getSnackbarManager(), SETTINGS_LAUNCHER);
 
-        if (!isWarmOnResume()) {
+        if (!isWarmOnResume() && FeedFeatures.isFeedEnabled()) {
             SuggestionsMetrics.recordArticlesListVisible();
         } else {
             mInactivityTracker.setLastVisibleTimeMsAndRecord(System.currentTimeMillis());
         }
 
         FeatureNotificationUtils.handleIntentIfApplicable(getIntent());
+        mInAppUpdater.onResume(this);
     }
 
     @Override
@@ -1301,6 +1338,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
 
             boolean noRestoreState =
                     CommandLine.getInstance().hasSwitch(ChromeSwitches.NO_RESTORE_STATE);
+            noRestoreState = noRestoreState || ContextUtils.getAppSharedPreferences().getBoolean("close_tabs_on_exit", false);
             if (noRestoreState) {
                 // Clear the state files because they are inconsistent and useless from now on.
                 mTabModelOrchestrator.clearState();
@@ -1369,15 +1407,16 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                     }
                 }, INITIAL_TAB_CREATION_TIMEOUT_MS);
             }
-
             // If initial tab creation is pending, this will instead be handled when we create the
             // initial tab in #createInitialTab.
             if (!mPendingInitialTabCreation) {
                 Tab currentTab = getActivityTab();
                 boolean isTabNtp = isTabRegularNtp(currentTab);
-                if (isTabNtp && !currentTab.isNativePage()) {
+                boolean isTabNativeUrl = currentTab != null && currentTab.getUrl().getScheme().equals(UrlConstants.CHROME_NATIVE_SCHEME);
+                if (isTabNtp && isTabNativeUrl && !currentTab.isNativePage()) {
                     // This will be a NTP, but the native page hasn't been created yet. Need to wait
                     // for this to be created before allowing the toolbar to draw.
+                    Log.i(TAG, "#initializeState begin content change");
                     currentTab.addObserver(new EmptyTabObserver() {
                         @Override
                         public void onContentChanged(Tab tab) {
@@ -1464,7 +1503,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                             this, getCurrentTabModel().isIncognito(), isTablet())) {
                 mLayoutManager.showLayout(LayoutType.BROWSING, true);
                 if (getTabModelSelector().getCurrentModel().getCount() == 0) {
-                    getCurrentTabCreator().launchNTP();
+                    launchNTP();
                 }
             }
         }
@@ -1621,15 +1660,15 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                     if (url == null || url.equals(UrlConstants.NTP_URL)) {
                         if (fromLauncherShortcut) {
                             getTabCreator(true).launchUrl(
-                                    UrlConstants.NTP_URL, TabLaunchType.FROM_LAUNCHER_SHORTCUT);
+                                     "chrome-search://local-ntp/incognito-ntp.html", TabLaunchType.FROM_LAUNCHER_SHORTCUT);
                             recordLauncherShortcutAction(true);
                             reportNewTabShortcutUsed(true);
                         } else if (fromAppWidget) {
                             RecordUserAction.record("QuickActionSearchWidget.StartIncognito");
                             getTabCreator(true).launchUrl(
-                                    UrlConstants.NTP_URL, TabLaunchType.FROM_APP_WIDGET);
+                                     "chrome-search://local-ntp/incognito-ntp.html", TabLaunchType.FROM_APP_WIDGET);
                         } else if (IncognitoTabLauncher.didCreateIntent(intent)) {
-                            Tab tab = getTabCreator(true).launchUrl(UrlConstants.NTP_URL,
+                            Tab tab = getTabCreator(true).launchUrl( "chrome-search://local-ntp/incognito-ntp.html",
                                     TabLaunchType.FROM_LAUNCH_NEW_INCOGNITO_TAB);
                             if (IncognitoTabLauncher.shouldFocusOmnibox(intent)) {
                                 // Since the Tab is created in the foreground, its View will gain
@@ -1645,7 +1684,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
                         } else {
                             // Used by the Account management screen to open a new incognito tab.
                             // Account management screen collects its metrics separately.
-                            getTabCreator(true).launchUrl(UrlConstants.NTP_URL,
+                            getTabCreator(true).launchUrl( "chrome-search://local-ntp/incognito-ntp.html",
                                     TabLaunchType.FROM_CHROME_UI, intent, mIntentHandlingTimeMs);
                         }
                     } else {
@@ -2141,7 +2180,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             reportNewTabShortcutUsed(false);
             if (fromMenu) RecordUserAction.record("MobileMenuNewTab.AppMenu");
 
-            getTabCreator(false).launchNTP();
+            getTabCreator(false).launchUrl(HomepageManager.getInstance().getHomepageUriIgnoringEnabledState(), TabLaunchType.FROM_CHROME_UI);
 
             mLocaleManager.showSearchEnginePromoIfNeeded(this, null);
         } else if (id == R.id.new_incognito_tab_menu_id) {
@@ -2242,6 +2281,8 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
             TabModel currentModel = mTabModelSelector.getCurrentModel();
             if (!currentModel.isIncognito()) currentModel.openMostRecentlyClosedEntry();
             RecordUserAction.record("MobileTabClosedUndoShortCut");
+        } else if (id == R.id.mises_forward_menu_id) {
+            handleForward(currentTab);
         } else if (id == R.id.quick_delete_menu_id
                 && QuickDeleteController.isQuickDeleteEnabled()) {
             assert !mTabModelSelector.getCurrentModel().isIncognito()
@@ -2925,6 +2966,7 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         try (TraceEvent e = TraceEvent.scoped("ChromeTabbedActivity.onActivityResult")) {
             super.onActivityResult(requestCode, resultCode, data);
+            mInAppUpdater.onActivityResult(requestCode,resultCode,data);
         }
     }
 
@@ -3061,4 +3103,55 @@ public class ChromeTabbedActivity extends ChromeActivity<ChromeActivityComponent
         }
         return mIsStartSurfaceRefactorEnabled;
     }
+
+    private void launchNTP() {
+        if (getTabModelSelector().isIncognitoSelected()) {
+            getCurrentTabCreator().launchIncognitoNTP();
+        } else {
+            getCurrentTabCreator().launchUrl(HomepageManager.getInstance().getHomepageUriIgnoringEnabledState(), TabLaunchType.FROM_CHROME_UI);
+        }
+    }
+    private void handleForward(final Tab currentTab) {
+         String SCRIPT = "if(window.misesModule && window.misesModule.getWindowInformation){window.misesModule.getWindowInformation()} else {console.log('window.misesModule or window.misesModule.getWindowInformation is null')}";
+            final Context context = ChromeTabbedActivity.this;
+            if (currentTab == null || currentTab.getWebContents() == null)
+                return;
+            if (currentTab.isNativePage() || currentTab.isClosing()
+                    || currentTab.isShowingErrorPage() ) {
+                Log.e("mises","share currentTab.isNativePage() || currentTab.isClosing() || currentTab.isShowingErrorPage() || currentTab.isShowingSadTab()");
+                Toast.makeText(context, context.getString(R.string.lbl_can_not_share_tip), Toast.LENGTH_SHORT).show();
+                return;
+            }
+            currentTab.getWebContents().evaluateJavaScript(SCRIPT, jsonResult -> {
+                Log.e("mises share msg : ", jsonResult);
+                if (jsonResult != null && !jsonResult.isEmpty()) {
+                    try {
+                        JSONObject ob = new JSONObject(jsonResult);
+                        String icon = "";
+                        if (ob.has("icon"))
+                            icon = ob.getString("icon");
+                        String title = ob.getString("title");
+                        String url = ob.getString("url");
+                        if (MisesController.getInstance().getMisesToken().isEmpty()) {
+                            MisesUtil.showAlertDialog(context, context.getString(R.string.lbl_login_tip), v1 -> {
+                                ChromeTabCreator tabCreator = ChromeTabbedActivity.this.getTabCreator(false);
+                                if (tabCreator != null) {
+                                    tabCreator.openSinglePage("https://home.mises.site/home/me");
+                                }
+                            });
+                            return;
+                        }
+                        MisesShareWin shareWin = MisesShareWin.newInstance(ChromeTabbedActivity.this, icon, title, url);
+                        shareWin.show((ChromeTabbedActivity.this).getSupportFragmentManager(), "MisesShareWin");
+                    } catch (JSONException e) {
+                        Log.e("mises", "share is not json" + e.toString());
+                        Toast.makeText(context, context.getString(R.string.lbl_can_not_share_tip), Toast.LENGTH_SHORT).show();
+                        e.printStackTrace();
+                    }
+                } else {
+                    Log.e("mises", "share json is null");
+                    Toast.makeText(context, context.getString(R.string.lbl_can_not_share_tip), Toast.LENGTH_SHORT).show();
+                }
+            });
+    }
 }
