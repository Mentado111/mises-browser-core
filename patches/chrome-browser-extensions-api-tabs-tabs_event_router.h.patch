diff --git a/chrome/browser/extensions/api/tabs/tabs_event_router.h b/chrome/browser/extensions/api/tabs/tabs_event_router.h
index f7b2f07f2d9801a5ffacfe27ffd38e03ea0ca3ca..ff11e8c32a447b03be9caaff149e74e2ac3d464d 100644
--- a/chrome/browser/extensions/api/tabs/tabs_event_router.h
+++ b/chrome/browser/extensions/api/tabs/tabs_event_router.h
@@ -25,6 +25,14 @@
 #include "content/public/browser/web_contents_observer.h"
 #include "extensions/browser/event_router.h"
 
+#if BUILDFLAG(IS_ANDROID)
+#include "chrome/browser/ui/android/tab_model/tab_model_list_observer.h"
+#include "chrome/browser/ui/android/tab_model/tab_model.h"
+#include "chrome/browser/ui/android/tab_model/tab_model_list.h"
+#include "chrome/browser/ui/android/tab_model/tab_model_observer.h"
+#include "chrome/browser/android/tab_android.h"
+#endif
+
 namespace content {
 class WebContents;
 }
@@ -36,6 +44,10 @@ namespace extensions {
 // TabsEventRouter will only route events from windows/tabs within a profile to
 // extension processes in the same profile.
 class TabsEventRouter : public TabStripModelObserver,
+#if BUILDFLAG(IS_ANDROID)
+                        public TabModelListObserver,
+                        public TabModelObserver,
+#endif
                         public BrowserTabStripTrackerDelegate,
                         public BrowserListObserver,
                         public favicon::FaviconDriverObserver,
@@ -91,6 +103,16 @@ class TabsEventRouter : public TabStripModelObserver,
   void OnAutoDiscardableStateChange(content::WebContents* contents,
                                     bool is_auto_discardable) override;
 
+#if BUILDFLAG(IS_ANDROID)
+  // TabModelListObserver implementation.
+  void OnTabModelAdded() override;
+  void OnTabModelRemoved() override;
+  void DidSelectTab(TabAndroid* tab, TabModel::TabSelectionType type)  override;
+  void WillCloseTab(TabAndroid* tab, bool animate) override;
+  void DidAddTab(TabAndroid* tab, TabModel::TabLaunchType type) override;
+  raw_ptr<TabModel> observed_tab_model_ = nullptr;
+#endif
+
  private:
   // Methods called from OnTabStripModelChanged.
   void DispatchTabInsertedAt(TabStripModel* tab_strip_model,
@@ -183,6 +205,7 @@ class TabsEventRouter : public TabStripModelObserver,
         const content::LoadCommittedDetails& load_details) override;
     void TitleWasSet(content::NavigationEntry* entry) override;
     void WebContentsDestroyed() override;
+    void DidStopLoading() override;
 
    private:
     // Whether we are waiting to fire the 'complete' status change. This will
