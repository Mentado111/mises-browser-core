diff --git a/chrome/browser/extensions/extension_tab_util.cc b/chrome/browser/extensions/extension_tab_util.cc
index c8c47f57ebed6498beeb93c89ee2eeaade2659d0..26402b0978f01e9dd1da3d49321123caad3d9225 100644
--- a/chrome/browser/extensions/extension_tab_util.cc
+++ b/chrome/browser/extensions/extension_tab_util.cc
@@ -167,8 +167,10 @@ base::expected<base::Value::Dict, std::string> ExtensionTabUtil::OpenTab(
   std::string error;
   Browser* browser = GetBrowserFromWindowID(chrome_details, window_id, &error);
   if (!browser) {
+#if !BUILDFLAG(IS_ANDROID)
     if (!params.create_browser_if_needed)
       return base::unexpected(error);
+#endif
 
     browser = CreateAndShowBrowser(profile, user_gesture, &error);
     if (!browser)
@@ -261,18 +263,32 @@ base::expected<base::Value::Dict, std::string> ExtensionTabUtil::OpenTab(
   navigate_params.tabstrip_index = index;
   navigate_params.user_gesture = false;
   navigate_params.tabstrip_add_types = add_types;
+
+#if BUILDFLAG(IS_ANDROID)
+  if (TabModelList::models().empty()) {
+    return base::unexpected("Tabs model not initialized");
+  } 
+  TabModel* tab_model = *(TabModelList::models().begin());
+  WebContents* web_contents = tab_model->CreateNewTabForDevTools(url);
+  navigate_params.navigated_or_inserted_contents = web_contents;
+#else
   base::WeakPtr<content::NavigationHandle> handle = Navigate(&navigate_params);
   if (handle && params.bookmark_id) {
     ChromeNavigationUIData* ui_data =
         static_cast<ChromeNavigationUIData*>(handle->GetNavigationUIData());
     ui_data->set_bookmark_id(*params.bookmark_id);
   }
+#endif
 
   // This happens in locked fullscreen mode.
   if (!navigate_params.navigated_or_inserted_contents) {
     return base::unexpected(tabs_constants::kLockedFullscreenModeNewTabError);
   }
 
+#if BUILDFLAG(IS_ANDROID)
+  TabStripModel* tab_strip = nullptr;
+  int new_index = tab_model->GetActiveIndex();
+#else
   // The tab may have been created in a different window, so make sure we look
   // at the right tab strip.
   TabStripModel* tab_strip = navigate_params.browser->tab_strip_model();
@@ -284,6 +300,7 @@ base::expected<base::Value::Dict, std::string> ExtensionTabUtil::OpenTab(
     if (tab_strip->GetIndexOfWebContents(opener) != TabStripModel::kNoTab)
       tab_strip->SetOpenerOfWebContentsAt(new_index, opener);
   }
+#endif
 
   if (active)
     navigate_params.navigated_or_inserted_contents->SetInitialFocus();
@@ -388,8 +405,10 @@ api::tabs::Tab ExtensionTabUtil::CreateTabObject(
     const Extension* extension,
     TabStripModel* tab_strip,
     int tab_index) {
+#if !BUILDFLAG(IS_ANDROID) 
   if (!tab_strip)
     ExtensionTabUtil::GetTabStripModel(contents, &tab_strip, &tab_index);
+#endif
   api::tabs::Tab tab_object;
   tab_object.id = GetTabIdForExtensions(contents);
   tab_object.index = tab_index;
@@ -459,6 +478,10 @@ api::tabs::Tab ExtensionTabUtil::CreateTabObject(
     }
   }
 
+#if BUILDFLAG(IS_ANDROID)
+  CreateTabObjectAndroid(&tab_object, contents, extension, tab_index);
+#endif
+
   ScrubTabForExtension(extension, contents, &tab_object, scrub_tab_behavior);
   return tab_object;
 }
@@ -467,6 +490,7 @@ base::Value::List ExtensionTabUtil::CreateTabList(const Browser* browser,
                                                   const Extension* extension,
                                                   Feature::Context context) {
   base::Value::List tab_list;
+#if !BUILDFLAG(IS_ANDROID)
   TabStripModel* tab_strip = browser->tab_strip_model();
   for (int i = 0; i < tab_strip->count(); ++i) {
     WebContents* web_contents = tab_strip->GetWebContentsAt(i);
@@ -476,6 +500,9 @@ base::Value::List ExtensionTabUtil::CreateTabList(const Browser* browser,
                                     tab_strip, i)
                         .ToValue());
   }
+#else
+  CreateTabListAndroid(browser, extension, context, tab_list);
+#endif
 
   return tab_list;
 }
@@ -690,6 +717,12 @@ bool ExtensionTabUtil::GetTabById(int tab_id,
       }
     }
   }
+
+#if BUILDFLAG(IS_ANDROID)
+  if (GetTabByIdAndroid(tab_id, contents, tab_index)) {
+    return true;
+  }
+#endif 
   return false;
 }
 
@@ -900,6 +933,7 @@ bool ExtensionTabUtil::OpenOptionsPage(const Extension* extension,
   // running in split mode, because it won't be able to save settings from OTR.
   // This version of OpenOptionsPage() can be called from an OTR window via e.g.
   // the action menu, since that's not initiated by the extension.
+#if !BUILDFLAG(IS_ANDROID)
   std::unique_ptr<chrome::ScopedTabbedBrowserDisplayer> displayer;
   if (browser->profile()->IsOffTheRecord() &&
       !IncognitoInfo::IsSplitMode(extension)) {
@@ -907,6 +941,7 @@ bool ExtensionTabUtil::OpenOptionsPage(const Extension* extension,
         browser->profile()->GetOriginalProfile());
     browser = displayer->browser();
   }
+#endif
 
   GURL url_to_navigate;
   bool open_in_tab = OptionsPageInfo::ShouldOpenInTab(extension);
