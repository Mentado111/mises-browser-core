diff --git a/chrome/browser/extensions/api/tabs/tabs_api.cc b/chrome/browser/extensions/api/tabs/tabs_api.cc
index fc55ae537f1e2cb53c0ef93e1c78baad1f96f5af..124c77fa54db2dc2357f9d947a47b2106531af13 100644
--- a/chrome/browser/extensions/api/tabs/tabs_api.cc
+++ b/chrome/browser/extensions/api/tabs/tabs_api.cc
@@ -171,6 +171,7 @@ class ApiParameterExtractor {
   raw_ptr<T> params_;
 };
 
+
 bool GetBrowserFromWindowID(const ChromeExtensionFunctionDetails& details,
                             int window_id,
                             Browser** browser,
@@ -184,6 +185,7 @@ bool GetBrowserFromWindowID(const ChromeExtensionFunctionDetails& details,
   return true;
 }
 
+#if !BUILDFLAG(IS_ANDROID)
 bool GetBrowserFromWindowID(ExtensionFunction* function,
                             int window_id,
                             Browser** browser,
@@ -191,6 +193,7 @@ bool GetBrowserFromWindowID(ExtensionFunction* function,
   return GetBrowserFromWindowID(ChromeExtensionFunctionDetails(function),
                                 window_id, browser, error);
 }
+#endif
 
 // |error_message| can optionally be passed in and will be set with an
 // appropriate message if the tab cannot be found by id.
@@ -310,6 +313,7 @@ api::tabs::Tab CreateTabObjectHelper(WebContents* contents,
 // new index of the tab in the target tabstrip. On failure, returns -1.
 // Assumes that the caller has already checked whether the target window is
 // different from the source.
+#if !BUILDFLAG(IS_ANDROID)
 int MoveTabToWindow(ExtensionFunction* function,
                     int tab_id,
                     Browser* target_browser,
@@ -363,6 +367,7 @@ int MoveTabToWindow(ExtensionFunction* function,
   return target_tab_strip->InsertWebContentsAt(
       target_index, std::move(web_contents), AddTabTypes::ADD_NONE);
 }
+#endif
 
 // This function sets the state of the browser window to a "locked"
 // fullscreen state (where the user can't exit fullscreen) in response to a
@@ -424,6 +429,7 @@ void SetLockedFullscreenState(Browser* browser, bool pinned) {
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
 }
 
+#if !BUILDFLAG(IS_ANDROID)
 // Returns whether the given `bounds` intersect with at least 50% of all the
 // displays.
 bool WindowBoundsIntersectDisplays(const gfx::Rect& bounds) {
@@ -435,6 +441,7 @@ bool WindowBoundsIntersectDisplays(const gfx::Rect& bounds) {
   }
   return intersect_area >= (bounds.size().GetArea() / 2);
 }
+#endif
 
 }  // namespace
 
@@ -529,12 +536,21 @@ ExtensionFunction::ResponseAction WindowsGetLastFocusedFunction::Run() {
         break;  // Use focused window.
     }
   }
+#if !BUILDFLAG(IS_ANDROID)
   if (!browser)
     return RespondNow(Error(tabs_constants::kNoLastFocusedWindowError));
+#endif
 
   ExtensionTabUtil::PopulateTabBehavior populate_tab_behavior =
       extractor.populate_tabs() ? ExtensionTabUtil::kPopulateTabs
                                 : ExtensionTabUtil::kDontPopulateTabs;
+#if BUILDFLAG(IS_ANDROID)  
+  if (!browser) {
+    base::Value::Dict windows = 
+       CreateDummyWindowValueForExtension(populate_tab_behavior);
+    return RespondNow(WithArguments(std::move(windows)));
+  }
+#endif
   base::Value::Dict windows = ExtensionTabUtil::CreateWindowValueForExtension(
       *browser, extension(), populate_tab_behavior, source_context_type());
   return RespondNow(WithArguments(std::move(windows)));
@@ -628,12 +644,14 @@ ExtensionFunction::ResponseAction WindowsCreateFunction::Run() {
       return RespondNow(Error(std::move(error)));
     }
 
+#if !BUILDFLAG(IS_ANDROID)
     if (!ExtensionTabUtil::IsTabStripEditable())
       return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
 
     if (source_browser->profile() != window_profile)
       return RespondNow(
           Error(tabs_constants::kCanOnlyMoveTabsWithinSameProfileError));
+#endif
 
     if (DevToolsWindow::IsDevToolsWindow(web_contents))
       return RespondNow(Error(tabs_constants::kNotAllowedForDevToolsError));
@@ -699,11 +717,13 @@ ExtensionFunction::ResponseAction WindowsCreateFunction::Run() {
       window_bounds.AdjustToFit(display.bounds());
     }
 
+#if !BUILDFLAG(IS_ANDROID)
     // Immediately fail if the window bounds don't intersect the displays.
     if ((set_window_position || set_window_size) &&
         !WindowBoundsIntersectDisplays(window_bounds)) {
       return RespondNow(Error(tabs_constants::kInvalidWindowBoundsError));
     }
+#endif
 
     if (create_data->focused)
       focused = *create_data->focused;
@@ -772,10 +792,20 @@ ExtensionFunction::ResponseAction WindowsCreateFunction::Run() {
       navigate_params.source_site_instance =
           render_frame_host()->GetSiteInstance();
     }
-
+#if BUILDFLAG(IS_ANDROID)
+    if (TabModelList::models().size() == 0) {
+        return RespondNow(
+            Error("no tab model."));
+    }
+    TabModel* tab_model = *(TabModelList::models().begin());
+    WebContents* web_contents = tab_model->CreateNewTabForExtension(extension_id, url, new_window->session_id().id());
+    navigate_params.navigated_or_inserted_contents = web_contents;
+#else
     Navigate(&navigate_params);
+#endif
   }
 
+#if !BUILDFLAG(IS_ANDROID)
   WebContents* contents = nullptr;
   // Move the tab into the created window only if it's an empty popup or it's
   // a tabbed window.
@@ -801,6 +831,7 @@ ExtensionFunction::ResponseAction WindowsCreateFunction::Run() {
       new_window, 0,
       TabStripUserGestureDetails(
           TabStripUserGestureDetails::GestureType::kNone));
+#endif
 
   if (focused) {
     new_window->window()->Show();
@@ -871,6 +902,7 @@ ExtensionFunction::ResponseAction WindowsUpdateFunction::Run() {
 
   Browser* browser = nullptr;
   std::string error;
+#if !BUILDFLAG(IS_ANDROID)
   if (!windows_util::GetBrowserFromWindowID(
           this, params->window_id, WindowController::GetAllWindowFilter(),
           &browser, &error)) {
@@ -996,7 +1028,13 @@ ExtensionFunction::ResponseAction WindowsUpdateFunction::Run() {
 
   if (params->update_info.draw_attention)
     browser->window()->FlashFrame(*params->update_info.draw_attention);
-
+#else
+  if (!windows_util::GetBrowserFromWindowID(
+          this, params->window_id, WindowController::kNoWindowFilter,
+          &browser, &error)) {
+    return RespondNow(NoArguments());
+  }
+#endif
   return RespondNow(
       WithArguments(ExtensionTabUtil::CreateWindowValueForExtension(
           *browser, extension(), ExtensionTabUtil::kDontPopulateTabs,
@@ -1029,6 +1067,12 @@ ExtensionFunction::ResponseAction WindowsRemoveFunction::Run() {
                                 ? tabs_constants::kTabStripNotEditableError
                                 : kUnknownErrorDoNotUse));
   }
+#if BUILDFLAG(IS_ANDROID)
+  CloseAllExtensionTabsAndroid();
+  if (BrowserList::GetInstance()->size() == 1) {
+    return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
+  }
+#endif
   controller->window()->Close();
   return RespondNow(NoArguments());
 }
@@ -1036,12 +1080,15 @@ ExtensionFunction::ResponseAction WindowsRemoveFunction::Run() {
 // Tabs ------------------------------------------------------------------------
 
 ExtensionFunction::ResponseAction TabsGetSelectedFunction::Run() {
+#if !BUILDFLAG(IS_ANDROID)
   // windowId defaults to "current" window.
   int window_id = extension_misc::kCurrentWindowId;
+#endif
 
   std::unique_ptr<tabs::GetSelected::Params> params(
       tabs::GetSelected::Params::Create(args()));
   EXTENSION_FUNCTION_VALIDATE(params.get());
+#if !BUILDFLAG(IS_ANDROID)
   if (params->window_id)
     window_id = *params->window_id;
 
@@ -1060,12 +1107,23 @@ ExtensionFunction::ResponseAction TabsGetSelectedFunction::Run() {
   return RespondNow(ArgumentList(tabs::Get::Results::Create(
       CreateTabObjectHelper(contents, extension(), source_context_type(),
                             tab_strip, tab_strip->active_index()))));
+#else
+  WebContents* contents = nullptr;
+  int active_index = GetSelectedTabIndexAndroid(&contents);
+  if (active_index != -1 && contents) {
+     return RespondNow(ArgumentList(
+          tabs::Get::Results::Create(CreateTabObjectHelper(
+              contents, extension(), source_context_type(), nullptr, active_index))));
+  }
+  return RespondNow(Error(tabs_constants::kNoSelectedTabError));
+#endif
 }
 
 ExtensionFunction::ResponseAction TabsGetAllInWindowFunction::Run() {
   std::unique_ptr<tabs::GetAllInWindow::Params> params(
       tabs::GetAllInWindow::Params::Create(args()));
   EXTENSION_FUNCTION_VALIDATE(params.get());
+#if !BUILDFLAG(IS_ANDROID)
   // windowId defaults to "current" window.
   int window_id = extension_misc::kCurrentWindowId;
   if (params->window_id)
@@ -1078,6 +1136,11 @@ ExtensionFunction::ResponseAction TabsGetAllInWindowFunction::Run() {
 
   return RespondNow(WithArguments(ExtensionTabUtil::CreateTabList(
       browser, extension(), source_context_type())));
+#else
+  base::Value::List result;
+  GetTabListValueAndroid(result, extension(), source_context_type());
+  return RespondNow(OneArgument(base::Value(std::move(result))));
+#endif
 }
 
 ExtensionFunction::ResponseAction TabsQueryFunction::Run() {
@@ -1106,9 +1169,11 @@ ExtensionFunction::ResponseAction TabsQueryFunction::Run() {
 
   std::string title = params->query_info.title.value_or(std::string());
 
+#if !BUILDFLAG(IS_ANDROID)
   int window_id = extension_misc::kUnknownWindowId;
   if (params->query_info.window_id)
     window_id = *params->query_info.window_id;
+#endif
 
   absl::optional<int> group_id = absl::nullopt;
   if (params->query_info.group_id)
@@ -1123,6 +1188,7 @@ ExtensionFunction::ResponseAction TabsQueryFunction::Run() {
     window_type = tabs::ToString(params->query_info.window_type);
 
   base::Value::List result;
+#if !BUILDFLAG(IS_ANDROID)
   Profile* profile = Profile::FromBrowserContext(browser_context());
   Browser* last_active_browser =
       chrome::FindAnyBrowser(profile, include_incognito_information());
@@ -1231,6 +1297,34 @@ ExtensionFunction::ResponseAction TabsQueryFunction::Run() {
                        web_contents->IsAudioMuted())) {
         continue;
       }
+#else
+TabStripModel* tab_strip = nullptr;
+TabModel *tab_strip_android = nullptr;
+  if (!TabModelList::models().empty())
+    tab_strip_android = *(TabModelList::models().begin());
+  if (tab_strip_android) {
+    for (int i = 0; i < tab_strip_android->GetTabCount(); ++i) {
+      WebContents* web_contents = tab_strip_android->GetWebContentsAt(i);
+      if (index > -1 && i != index) {
+         continue;
+      }
+
+      int openingTab = tab_strip_android->GetLastNonExtensionActiveIndex();
+      if (params->query_info.last_focused_window) {
+        openingTab = tab_strip_android->GetActiveIndex();
+      }
+      if (openingTab == -1)
+        openingTab = 0;
+
+      if (!MatchesBool(params->query_info.active, i == openingTab)) {
+         continue;
+      }
+      
+
+      if (!web_contents) {
+        continue;
+      }
+#endif
 
       if (!title.empty() || !url_patterns.is_empty()) {
         // "title" and "url" properties are considered privileged data and can
@@ -1377,6 +1471,7 @@ ExtensionFunction::ResponseAction TabsHighlightFunction::Run() {
       tabs::Highlight::Params::Create(args()));
   EXTENSION_FUNCTION_VALIDATE(params.get());
 
+#if !BUILDFLAG(IS_ANDROID)
   // Get the window id from the params; default to current window if omitted.
   int window_id = params->highlight_info.window_id.value_or(
       extension_misc::kCurrentWindowId);
@@ -1420,6 +1515,11 @@ ExtensionFunction::ResponseAction TabsHighlightFunction::Run() {
   if (!tab_strip_model)
     return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
   tab_strip_model->SetSelectionFromModel(std::move(selection));
+#else
+  Browser* browser = ChromeExtensionFunctionDetails(this).GetCurrentBrowser();;
+  if (!browser || !HighlightTabAndroid(params->highlight_info))
+    return RespondNow(Error(tabs_constants::kNoCurrentWindowError));
+#endif
   return RespondNow(
       WithArguments(ExtensionTabUtil::CreateWindowValueForExtension(
           *browser, extension(), ExtensionTabUtil::kPopulateTabs,
@@ -1456,6 +1556,7 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
   int tab_id = -1;
   WebContents* contents = nullptr;
   if (!params->tab_id) {
+#if !BUILDFLAG(IS_ANDROID)
     Browser* browser = ChromeExtensionFunctionDetails(this).GetCurrentBrowser();
     if (!browser)
       return RespondNow(Error(tabs_constants::kNoCurrentWindowError));
@@ -1464,6 +1565,9 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
     if (!tab_strip_model)
       return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
     contents = tab_strip_model->GetActiveWebContents();
+#else
+    contents = GetActiveWebContentsAndroid();
+#endif
     if (!contents)
       return RespondNow(Error(tabs_constants::kNoSelectedTabError));
     tab_id = sessions::SessionTabHelper::IdForTab(contents).id();
@@ -1472,9 +1576,10 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
   }
 
   int tab_index = -1;
-  TabStripModel* tab_strip = nullptr;
   Browser* browser = nullptr;
   std::string error;
+#if !BUILDFLAG(IS_ANDROID)
+  TabStripModel* tab_strip = nullptr;
   if (!GetTabById(tab_id, browser_context(), include_incognito_information(),
                   &browser, &tab_strip, &contents, &tab_index, &error)) {
     return RespondNow(Error(std::move(error)));
@@ -1485,7 +1590,17 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
 
   if (!ExtensionTabUtil::BrowserSupportsTabs(browser))
     return RespondNow(Error(tabs_constants::kNoCurrentWindowError));
-
+#else
+  TabModel *tab_strip_android = nullptr;
+  if (!TabModelList::models().empty())
+    tab_strip_android = *(TabModelList::models().begin());
+  if (!tab_strip_android)
+    return RespondNow(Error(tabs_constants::kNoCurrentWindowError));
+  if (!GetTabById(tab_id, browser_context(), include_incognito_information(),
+                  &browser, nullptr, &contents, &tab_index, &error)) {
+    return RespondNow(Error(error));
+  }
+#endif
   web_contents_ = contents;
 
   // TODO(rafaelw): handle setting remaining tab properties:
@@ -1495,11 +1610,13 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
   // Navigate the tab to a new location if the url is different.
   if (params->update_properties.url) {
     std::string updated_url = *params->update_properties.url;
+#if !BUILDFLAG(IS_ANDROID)
     if (browser->profile()->IsIncognitoProfile() &&
         !IsURLAllowedInIncognito(GURL(updated_url), browser->profile())) {
       return RespondNow(Error(ErrorUtils::FormatErrorMessage(
           tabs_constants::kURLsNotAllowedInIncognitoError, updated_url)));
     }
+#endif
     if (!UpdateURL(updated_url, tab_id, &error))
       return RespondNow(Error(std::move(error)));
   }
@@ -1520,10 +1637,16 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
     if (!ExtensionTabUtil::IsTabStripEditable())
       return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
 
+#if !BUILDFLAG(IS_ANDROID)
     if (tab_strip->active_index() != tab_index) {
       tab_strip->ActivateTabAt(tab_index);
       DCHECK_EQ(contents, tab_strip->GetActiveWebContents());
     }
+#else
+    if (tab_strip_android->GetActiveIndex() != tab_index) {
+      tab_strip_android->SetActiveIndex(tab_index);
+    } 
+#endif
   }
 
   if (params->update_properties.highlighted) {
@@ -1532,10 +1655,12 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
     if (!ExtensionTabUtil::IsTabStripEditable())
       return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
 
+#if !BUILDFLAG(IS_ANDROID)
     bool highlighted = *params->update_properties.highlighted;
     if (highlighted != tab_strip->IsTabSelected(tab_index)) {
       tab_strip->ToggleSelectionAt(tab_index);
     }
+#endif
   }
 
   if (params->update_properties.pinned) {
@@ -1544,11 +1669,13 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
     if (!ExtensionTabUtil::IsTabStripEditable())
       return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
 
+#if !BUILDFLAG(IS_ANDROID)
     bool pinned = *params->update_properties.pinned;
     tab_strip->SetTabPinned(tab_index, pinned);
 
     // Update the tab index because it may move when being pinned.
     tab_index = tab_strip->GetIndexOfWebContents(contents);
+#endif
   }
 
   if (params->update_properties.muted &&
@@ -1559,6 +1686,7 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
         base::NumberToString(tab_id))));
   }
 
+#if !BUILDFLAG(IS_ANDROID)
   if (params->update_properties.opener_tab_id) {
     int opener_id = *params->update_properties.opener_tab_id;
     WebContents* opener_contents = nullptr;
@@ -1590,6 +1718,7 @@ ExtensionFunction::ResponseAction TabsUpdateFunction::Run() {
         web_contents_)
         ->SetAutoDiscardable(state);
   }
+#endif
 
   return RespondNow(GetResult());
 }
@@ -1711,6 +1840,10 @@ bool TabsMoveFunction::MoveTab(int tab_id,
     *error = tabs_constants::kTabStripNotEditableError;
     return false;
   }
+#if BUILDFLAG(IS_ANDROID)
+    *error = tabs_constants::kTabStripNotEditableError;
+    return false;
+#else
 
   if (window_id && *window_id != ExtensionTabUtil::GetWindowIdOfTab(contents)) {
     Browser* target_browser = nullptr;
@@ -1765,6 +1898,7 @@ bool TabsMoveFunction::MoveTab(int tab_id,
   *new_index += 1;
 
   return true;
+#endif
 }
 
 ExtensionFunction::ResponseAction TabsReloadFunction::Run() {
@@ -1849,11 +1983,13 @@ bool TabsRemoveFunction::RemoveTab(int tab_id, std::string* error) {
     return false;
   }
 
+#if !BUILDFLAG(IS_ANDROID)
   // Don't let the extension remove a tab if the user is dragging tabs around.
   if (!browser->window()->IsTabStripEditable()) {
     *error = tabs_constants::kTabStripNotEditableError;
     return false;
   }
+#endif
   // The tab might not immediately close after calling Close() below, so we
   // should wait until WebContentsDestroyed is called before responding.
   web_contents_destroyed_observers_.push_back(
@@ -1911,7 +2047,9 @@ ExtensionFunction::ResponseAction TabsGroupFunction::Run() {
   std::unique_ptr<tabs::Group::Params> params(
       tabs::Group::Params::Create(args()));
   EXTENSION_FUNCTION_VALIDATE(params.get());
-
+#if BUILDFLAG(IS_ANDROID)
+  return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
+#else
   std::string error;
 
   // Get the target browser from the parameters.
@@ -2016,6 +2154,7 @@ ExtensionFunction::ResponseAction TabsGroupFunction::Run() {
   DCHECK_GT(group_id, 0);
 
   return RespondNow(WithArguments(group_id));
+#endif
 }
 
 ExtensionFunction::ResponseAction TabsUngroupFunction::Run() {
@@ -2368,6 +2507,7 @@ ExecuteCodeFunction::InitResult ExecuteCodeInTabFunction::Init() {
   // If the tab ID wasn't given then it needs to be converted to the
   // currently active tab's ID.
   if (tab_id == -1) {
+#if !BUILDFLAG(IS_ANDROID)
     Browser* browser = chrome_details_.GetCurrentBrowser();
     // Can happen during shutdown.
     if (!browser)
@@ -2376,6 +2516,12 @@ ExecuteCodeFunction::InitResult ExecuteCodeInTabFunction::Init() {
     // Can happen during shutdown.
     if (!ExtensionTabUtil::GetDefaultTab(browser, &web_contents, &tab_id))
       return set_init_result_error(tabs_constants::kNoTabInBrowserWindowError);
+#else
+    tab_id = GetSelectedTabIdAndroid();
+    if (tab_id == -1) {
+      return set_init_result_error(tabs_constants::kNoCurrentWindowError);
+    }
+#endif
   }
 
   execute_tab_id_ = tab_id;
@@ -2460,7 +2606,11 @@ ScriptExecutor* ExecuteCodeInTabFunction::GetScriptExecutor(
   bool success = GetTabById(execute_tab_id_, browser_context(),
                             include_incognito_information(), &browser, nullptr,
                             &contents, nullptr, error) &&
+#if !BUILDFLAG(IS_ANDROID)
                  contents && browser;
+#else
+                  contents;
+#endif
 
   if (!success)
     return nullptr;
